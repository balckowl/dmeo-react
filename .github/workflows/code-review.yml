name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Perform code review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PULL_REQUEST: ${{ github.event.pull_request.number }}
        run: |
          python <<EOF
          import os
          import requests

          GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
          GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
          GITHUB_REPOSITORY = os.getenv('GITHUB_REPOSITORY')
          GITHUB_PULL_REQUEST = os.getenv('GITHUB_PULL_REQUEST')
          MODEL = 'gemini-1.5-flash'
          PROMPT = '以下のコード差分に不明点や不規則性がないか確認してください:'

          # GitHub APIからPull Requestの変更ファイルとコミットIDを取得
          github_files_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}/files'
          github_pr_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}'
          headers = {
              'Authorization': f'Bearer {GITHUB_TOKEN}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # コミットIDを取得
          pr_response = requests.get(github_pr_url, headers=headers)
          if pr_response.status_code == 200:
              commit_id = pr_response.json()['head']['sha']
          else:
              print(f'GitHub APIエラー: {pr_response.status_code} - {pr_response.text}')
              exit(1)

          # 変更ファイルの取得
          files_response = requests.get(github_files_url, headers=headers)
          if files_response.status_code == 200:
              files = files_response.json()
          else:
              print(f'GitHub APIエラー: {files_response.status_code} - {files_response.text}')
              exit(1)

          # Gemini APIでレビュー結果を生成し、GitHubにコメントを投稿
          for file in files:
              filename = file['filename']
              patch = file.get('patch', '')
              if not patch:
                  continue

              lines = patch.split('\\n')
              position = 0
              for line in lines:
                  if line.startswith('+') and not line.startswith('+++'):
                      code_snippet = line[1:]  # '+'を除去

                      # Gemini APIリクエスト
                      gemini_headers = {
                          'Authorization': f'Bearer {GEMINI_API_KEY}',
                          'Content-Type': 'application/json',
                      }
                      gemini_data = {
                          'model': MODEL,
                          'messages': [
                              {'role': 'system', 'content': 'あなたは優秀なコードレビュアーです。'},
                              {'role': 'user', 'content': f'{PROMPT}\n\n{code_snippet}'},
                          ],
                      }
                      gemini_response = requests.post(
                          'https://generativelanguage.googleapis.com/v1beta/chat/completions',
                          headers=gemini_headers,
                          json=gemini_data
                      )
                      if gemini_response.status_code == 200:
                          review_comment = gemini_response.json()['choices'][0]['message']['content']
                      else:
                          print(f'Gemini APIエラー: {gemini_response.status_code} - {gemini_response.text}')
                          continue

                      # GitHubにコメントを投稿
                      github_comment_url = f'https://api.github.com/repos/{GITHUB_REPOSITORY}/pulls/{GITHUB_PULL_REQUEST}/comments'
                      comment_data = {
                          'body': review_comment,
                          'commit_id': commit_id,
                          'path': filename,
                          'line': position
                      }
                      comment_response = requests.post(github_comment_url, headers=headers, json=comment_data)
                      if comment_response.status_code == 201:
                          print(f'コメントを追加しました: {review_comment}')
                      else:
                          print(f'コメントの投稿に失敗しました: {comment_response.status_code} - {comment_response.text}')
          EOF
