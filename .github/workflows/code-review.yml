name: Code Review

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install axios

      - name: Perform code review and post results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
        run: |
          node <<EOF
          const axios = require('axios');
          // 環境変数の読み込み
          const githubToken = process.env.GITHUB_TOKEN;
          const geminiApiKey = process.env.GEMINI_API_KEY;
          const repository = process.env.GITHUB_REPOSITORY;
          const pullRequestNumber = process.env.GITHUB_PULL_REQUEST;
          // 環境変数の検証
          if (!githubToken || !geminiApiKey || !repository || !pullRequestNumber) {
              console.error("必要な環境変数が設定されていません。");
              console.error({
                  githubToken,
                  geminiApiKey,
                  repository,
                  pullRequestNumber,
              });
              process.exit(1);
          }
          // 必要なURLを組み立て
          const githubApiUrl = `https://api.github.com/repos/${repository}/pulls/${pullRequestNumber}/files`;
          const commentsApiUrl = `https://api.github.com/repos/${repository}/pulls/${pullRequestNumber}/comments`;
          const geminiApiUrl = 'https://generativelanguage.googleapis.com/v1beta/chat/completions';
          const headers = {
              Authorization: `Bearer ${githubToken}`,
              'Content-Type': 'application/json',
          };
          // GitHub APIから変更されたファイルを取得
          async function fetchChangedFiles() {
              try {
                  const response = await axios.get(githubApiUrl, { headers });
                  return response.data; // 変更されたファイルリスト
              } catch (error) {
                  console.error("GitHub APIから変更されたファイルの取得に失敗しました。", error.response ? error.response.data : error.message);
                  process.exit(1);
              }
          }
          // Gemini APIでコードをレビュー
          async function reviewCode(diff) {
              const geminiHeaders = {
                  Authorization: `Bearer ${geminiApiKey}`,
                  'Content-Type': 'application/json',
              };
              const data = {
                  model: 'gemini-1.5-flash',
                  messages: [
                      { role: 'system', content: 'あなたは優秀なコードレビュアーです。' },
                      { role: 'user', content: `以下のコード差分をレビューしてください:\n\n${diff}` },
                  ],
              };
              try {
                  const response = await axios.post(geminiApiUrl, data, { headers: geminiHeaders });
                  return response.data.choices[0].message.content; // レビューコメント
              } catch (error) {
                  console.error("Gemini APIでのコードレビューに失敗しました。", error.response ? error.response.data : error.message);
                  process.exit(1);
              }
          }
          // GitHubにコメントを投稿
          async function postReviewComment(file, line, comment) {
              const payload = {
                  body: comment,
                  path: file,
                  line: line,
                  side: 'RIGHT', // 変更後のコードにコメントする
              };
              try {
                  await axios.post(commentsApiUrl, payload, { headers });
              } catch (error) {
                  console.error("GitHubにコメントを投稿できませんでした。", error.response ? error.response.data : error.message);
                  process.exit(1);
              }
          }
          // メイン処理
          async function main() {
              const changedFiles = await fetchChangedFiles();
              for (const file of changedFiles) {
                  const { filename, patch } = file;
                  const lines = patch.split('\n');
                  for (let i = 0; i < lines.length; i++) {
                      if (lines[i].startsWith('+') && !lines[i].startsWith('+++')) {
                          const lineContent = lines[i].substring(1);
                          const reviewComment = await reviewCode(lineContent);
                          await postReviewComment(filename, i + 1, reviewComment);
                      }
                  }
              }
              console.log('レビューコメントをPRに追加しました');
          }
          // 実行
          main().catch(error => {
              console.error('エラー:', error.response ? error.response.data : error.message);
          });
          EOF
